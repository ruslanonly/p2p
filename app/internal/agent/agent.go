package agent

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"regexp"
	"strings"
	"sync"
	"time"

	"github.com/hashicorp/go-hclog"
	"github.com/hashicorp/raft"
	raftnet "github.com/libp2p/go-libp2p-raft"
	libp2pNetwork "github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	looplabFSM "github.com/looplab/fsm"
	"github.com/multiformats/go-multiaddr"
	"github.com/ruslanonly/p2p/internal/agent/messages"
	"github.com/ruslanonly/p2p/internal/consensus/hubelection"
	"github.com/ruslanonly/p2p/internal/fsm"
	"github.com/ruslanonly/p2p/internal/network"
)

type AgentPeerInfoPeer struct {
	ID    peer.ID
	Addrs []string
	IsHub bool
}

type AgentPeerInfo struct {
	ID    peer.ID
	IsHub bool
	Peers map[peer.ID]AgentPeerInfoPeer
}

type Agent struct {
	node *network.LibP2PNode
	ctx  context.Context
	fsm  *fsm.AgentFSM

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç—ã –∏ —Ö–∞–±—ã
	peers      map[peer.ID]AgentPeerInfo
	peersMutex sync.RWMutex

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ö–∞–±–æ–≤
	peersLimit int
}

type StartOptions struct {
	BootstrapIP     string
	BootstrapPeerID string
}

func NewAgent(ctx context.Context, peersLimit, port int) (*Agent, error) {
	libp2pNode, err := network.NewLibP2PNode(ctx, port)

	if err != nil {
		log.Fatalf("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: %v", err)
	}

	agent := &Agent{
		node:       libp2pNode,
		ctx:        ctx,
		peers:      make(map[peer.ID]AgentPeerInfo),
		peersLimit: peersLimit,
	}

	return agent, nil
}

func (a *Agent) getSplittedPeers() (map[peer.ID]AgentPeerInfo, map[peer.ID]AgentPeerInfo) {
	hubs := make(map[peer.ID]AgentPeerInfo)
	abonents := make(map[peer.ID]AgentPeerInfo)

	for peerID, peerInfo := range a.peers {
		if peerInfo.IsHub {
			hubs[peerID] = peerInfo
		} else {
			abonents[peerID] = peerInfo
		}
	}

	return hubs, abonents
}

// [ABONENT]
func (a *Agent) getMyHub() (*AgentPeerInfo, bool) {
	for _, peerInfo := range a.peers {
		if peerInfo.IsHub {
			return &peerInfo, true
		}
	}

	return nil, false
}

// [ABONENT]
func (a *Agent) getSegmentPeers() map[peer.ID]AgentPeerInfoPeer {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	myHub, myHubIsFound := a.getMyHub()
	segmentPeers := make(map[peer.ID]AgentPeerInfoPeer)

	if myHubIsFound {
		for peerID, peerInfo := range a.peers[myHub.ID].Peers {
			if !peerInfo.IsHub {
				segmentPeers[peerID] = peerInfo
			}
		}
	}

	return segmentPeers
}

func (a *Agent) isPeersLimitExceeded() bool {
	out := len(a.peers) >= a.peersLimit

	return out
}

func (a *Agent) getHubSlotsStatus() messages.HubSlotsStatus {
	abonents, _ := a.getSplittedPeers()

	hasAbonents := len(abonents) == 0
	var status messages.HubSlotsStatus

	if !a.isPeersLimitExceeded() {
		status = messages.FreeHubSlotsStatus
	} else if hasAbonents {
		status = messages.FullHavingAbonentsHubSlotsStatus
	} else {
		status = messages.FullNotHavingAbonentsHubSlotsStatus
	}

	return status
}

func (a *Agent) disconnectPeer(peerID peer.ID) {
	for _, conn := range a.node.Host.Network().ConnsToPeer(peerID) {
		_ = conn.Close()
	}
	a.node.Host.Peerstore().RemovePeer(peerID)
	a.node.Host.ConnManager().Unprotect(peerID, "permanent")
	delete(a.peers, peerID)
}

func (a *Agent) disconnectAllPeers() {
	for peerID := range a.peers {
		a.disconnectPeer(peerID)
	}

	a.peers = make(map[peer.ID]AgentPeerInfo)
}

func (a *Agent) Start(options *StartOptions) {
	a.node.PrintHostInfo()

	a.fsm = fsm.NewAgentFSM(
		a.ctx,
		looplabFSM.Callbacks{
			"enter_state": func(e_ context.Context, e *looplabFSM.Event) {
				log.Printf("üì¶ FSM –ø–µ—Ä–µ—Ö–æ–¥: %s -> %s –ø–æ —Å–æ–±—ã—Ç–∏—é '%s' —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ %s", e.Src, e.Dst, e.Event, e.Args)
			},
			fsm.ConnectingToHubAgentFSMState: func(e_ context.Context, e *looplabFSM.Event) {
				bootstrapAddr, ok1 := e.Args[0].(string)
				if !ok1 {
					log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è ConnectingToHubAgentFSMState: %v\n", e.Args[0])
					return
				}

				bootstrapPeerID, ok2 := e.Args[1].(string)
				if !ok2 {
					log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è ConnectingToHubAgentFSMState: %v\n", e.Args[1])
					return
				}

				a.bootstrap(bootstrapAddr, bootstrapPeerID)
				e.FSM.SetMetadata(fsm.RoleAgentFSMMetadataKey, fsm.AbonentRole)
			},
			fsm.EnterStateFSMCallbackName(fsm.ListeningMessagesAsHubAgentFSMState): func(e_ context.Context, e *looplabFSM.Event) {
				e.FSM.SetMetadata(fsm.RoleAgentFSMMetadataKey, fsm.HubRole)
				a.startStream()

				infoAboutMeCtx, infoAboutMeCancelCtx := context.WithCancel(context.Background())

				e.FSM.SetMetadata("infoAboutMeCtx", infoAboutMeCtx)
				e.FSM.SetMetadata("infoAboutMeCancelCtx", infoAboutMeCancelCtx)

				go func(ctx context.Context) {
					ticker := time.NewTicker(20 * time.Second)
					defer ticker.Stop()

					a.broadcastToHubsInfoAboutMe()
					a.broadcastToSegmentInfoAboutSegment()

					for {
						select {
						case <-ctx.Done():
							log.Println("üõë –¶–∏–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ—Ç–º–µ–Ω—ë–Ω —á–µ—Ä–µ–∑ cancel)")
							return
						case <-ticker.C:
							a.broadcastToHubsInfoAboutMe()
							a.broadcastToSegmentInfoAboutSegment()
						}
					}
				}(infoAboutMeCtx)
			},
			fsm.LeaveStateFSMCallbackName(fsm.ListeningMessagesAsHubAgentFSMState): func(e_ context.Context, e *looplabFSM.Event) {

			},
			fsm.EnterStateFSMCallbackName(fsm.ListeningMessagesAsAbonentAgentFSMState): func(e_ context.Context, e *looplabFSM.Event) {
				e.FSM.SetMetadata(fsm.RoleAgentFSMMetadataKey, fsm.AbonentRole)
				a.startStream()
			},
			fsm.OrganizingSegmentHubElectionAgentFSMState: func(e_ context.Context, e *looplabFSM.Event) {
				a.organizeSegmentHubElection()
			},
			fsm.EnterStateFSMCallbackName(fsm.ElectingNewHubAgentFSMState): func(e_ context.Context, e *looplabFSM.Event) {
				segmentPeers, ok := e.Args[0].([]AgentPeerInfoPeer)

				if !ok {
					log.Println("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç peers –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö []AgentPeerInfoPeer")
					return
				}

				initialize, ok := e.Args[1].(bool)

				if !ok {
					log.Println("–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç initialize –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö bool")
					return
				}

				if initialize {
					a.initializeElectionForMySegment(segmentPeers)
				} else {
					a.prepareForElection(segmentPeers)
				}
			},
		},
	)

	if options != nil {
		bootstrapAddr := fmt.Sprintf("/ip4/%s/tcp/5000", options.BootstrapIP)

		// –£–∑–µ–ª –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞–±–æ–Ω–µ–Ω—Ç
		a.fsm.Event(fsm.ReadInitialSettingsAgentFSMEvent, bootstrapAddr, options.BootstrapPeerID)
	} else {
		// –£–∑–µ–ª –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∫–∞–∫ —Ö–∞–±
		a.fsm.Event(fsm.BecomeHubAgentFSMEvent)
	}

	notifiee := network.Notifiee{
		OnDisconnect: func(peerID peer.ID) {
			fmt.Println("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç :", peerID)
			a.disconnectPeer(peerID)
		},
	}

	a.node.Host.Network().Notify(&notifiee)

	<-a.ctx.Done()
	fmt.Println("–ê–≥–µ–Ω—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
	_ = a.node.Close()
}

func (a *Agent) isHub() bool {
	raw, ok := a.fsm.FSM.Metadata(fsm.RoleAgentFSMMetadataKey)
	metadataRole, err := raw.(fsm.RoleAgentFSMMetadataValue)
	if !ok || err {
		log.Println("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FSM Metadata Role")
	}

	return metadataRole == fsm.HubRole
}

func (a *Agent) isAbonent() bool {
	raw, ok := a.fsm.FSM.Metadata(fsm.RoleAgentFSMMetadataKey)
	metadataRole, err := raw.(fsm.RoleAgentFSMMetadataValue)
	if !ok || err {
		log.Println("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FSM Metadata Role")
	}

	return metadataRole == fsm.AbonentRole
}

func (a *Agent) bootstrap(addr, peerID string) {
	period := 10 * time.Second

	a.disconnectAllPeers()

	addrWithPeerID := fmt.Sprintf("%s/p2p/%s", addr, peerID)
	maddr, err := multiaddr.NewMultiaddr(addrWithPeerID)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ bootstrap: %v", err)
	}

	log.Printf("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap-—É–∑–ª—É: %s", maddr.String())

	for {
		hubAddrInfo, err := peer.AddrInfoFromP2pAddr(maddr)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ peer.AddrInfo: %v", err)
			time.Sleep(period)
			continue
		}

		if err := a.node.Connect(*hubAddrInfo); err != nil {
			log.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap –Ω–µ —É–¥–∞–ª–æ—Å—å: %v. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %s...", err, period)
			if strings.Contains(err.Error(), "peer id mismatch") {
				re := regexp.MustCompile(`remote key matches ([\w\d]+)`)
				matches := re.FindStringSubmatch(err.Error())
				if len(matches) > 1 {
					actualBootstrapPeerID := matches[1]
					log.Printf("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π PeerID: %s", actualBootstrapPeerID)
					a.bootstrap(addr, actualBootstrapPeerID)
					break
				}
			}
			time.Sleep(period)
		} else {
			a.node.Host.ConnManager().Protect(hubAddrInfo.ID, "permanent")

			s, err := a.node.Host.NewStream(context.Background(), hubAddrInfo.ID, ProtocolID)
			if err != nil {
				log.Println(err)
				return
			}

			msg := messages.Message{
				Type: messages.ConnectRequestMessageType,
			}

			if err := json.NewEncoder(s).Encode(msg); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:", err)
				return
			}

			reader := bufio.NewReader(s)
			responseRaw, err := reader.ReadString('\n')
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", err)
				return
			}

			var message messages.Message
			if err := json.Unmarshal([]byte(responseRaw), &message); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				return
			}

			if message.Type == messages.ConnectedMessageType {
				log.Printf("–Ø –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ö–∞–±—É")
				a.fsm.Event(fsm.ConnectedToHubAgentFSMEvent)

				var body messages.ConnectedMessageBody
				if err := json.Unmarshal(message.Body, &body); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:", err)
					return
				}

				a.peers[hubAddrInfo.ID] = AgentPeerInfo{
					ID:    hubAddrInfo.ID,
					IsHub: true,
					Peers: make(map[peer.ID]AgentPeerInfoPeer, 0),
				}

				a.handleInfoAboutSegment(hubAddrInfo.ID, body.Peers)
			} else if message.Type == messages.NotConnectedAndWaitMessageType {
				log.Print("–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –æ–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ö–∞–±–µ")
			} else if message.Type == messages.NotConnectedMessageType {
				log.Print("–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
				a.fsm.Event(fsm.NotConnectedToHubAgentFSMEvent, addr, peerID)
			}

			break
		}
	}
}

func (a *Agent) startStream() {
	log.Println("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è hub-–ø–æ—Ç–æ–∫–∞")

	a.node.SetStreamHandler(ProtocolID, a.streamHandler)

	a.node.Host.Network().Notify(a.node.Host.ConnManager().Notifee())

}

func (a *Agent) closeStream() {
	a.node.RemoveStreamHandler(ProtocolID)
}

func (a *Agent) streamHandler(stream libp2pNetwork.Stream) {
	buf := bufio.NewReader(stream)
	raw, err := buf.ReadString('\n')

	if err != nil {
		log.Println(buf)
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", raw)

	var msg messages.Message
	if err := json.Unmarshal([]byte(raw), &msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	if msg.Type == messages.ConnectRequestMessageType {
		a.handleConnectionRequestMessage(stream)
	} else if msg.Type == messages.BecomeOnlyOneHubMessageType {
		a.fsm.Event(fsm.BecomeHubAgentFSMEvent)
	} else if msg.Type == messages.InitializeElectionRequestMessageType {
		var body messages.InitializeElectionRequestMessageBody
		if err := json.Unmarshal([]byte(msg.Body), &body); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return
		}

		a.handleInfoAboutSegment(stream.Conn().RemotePeer(), body.Peers)

		segmentPeersMap := a.getSegmentPeers()
		segmentPeersArr := make([]AgentPeerInfoPeer, 0)
		for _, p := range segmentPeersMap {
			segmentPeersArr = append(segmentPeersArr, p)
		}

		log.Println("üö© –Ø –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –≤—ã–±–æ—Ä—ã")
		err := a.fsm.Event(fsm.ElectNewHubRequestFSMEvent, segmentPeersArr, true)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ FSM –ø–µ—Ä–µ—Ö–æ–¥–µ: %v", err)
		}
	} else if msg.Type == messages.InfoAboutSegmentMessageType {
		var infoAboutSegment messages.InfoAboutSegmentMessageBody
		if err := json.Unmarshal([]byte(msg.Body), &infoAboutSegment); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:", err)
			return
		}

		a.handleInfoAboutSegment(stream.Conn().RemotePeer(), infoAboutSegment.Peers)
	} else if msg.Type == messages.ElectionRequestMessageType {
		log.Println("üö© –ú–µ–Ω—è –ø–æ–∑–≤–∞–ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤—ã–±–æ—Ä–∞—Ö –Ω–æ–≤–æ–≥–æ —Ö–∞–±–∞")

		var infoAboutSegment messages.InfoAboutSegmentMessageBody
		if err := json.Unmarshal([]byte(msg.Body), &infoAboutSegment); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:", err)
			return
		}

		// TODO: COPY PASTE FROM msg.Type == messages.InfoAboutSegmentMessageType
		segmentPeersMap := a.getSegmentPeers()
		segmentPeersArr := make([]AgentPeerInfoPeer, 0)
		for _, p := range segmentPeersMap {
			segmentPeersArr = append(segmentPeersArr, p)
		}

		err := a.fsm.Event(fsm.ElectNewHubRequestFSMEvent, segmentPeersArr, false)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ FSM –ø–µ—Ä–µ—Ö–æ–¥–µ: %v", err)
		}
	} else if msg.Type == messages.InfoAboutMeForHubsMessageType {
		var infoAboutHub messages.InfoAboutMeForHubsMessageBody
		if err := json.Unmarshal([]byte(msg.Body), &infoAboutHub); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:", err)
			return
		}

		a.handleInfoAboutHub(infoAboutHub)
	}
}

// [HUB] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (a *Agent) handleConnectionRequestMessage(stream libp2pNetwork.Stream) {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()
	slotsStatus := a.getHubSlotsStatus()

	if slotsStatus == messages.FreeHubSlotsStatus {
		a.handleConnectedOnConnectionRequest(stream)
	} else {
		var msg messages.Message

		if slotsStatus == messages.FullHavingAbonentsHubSlotsStatus {
			msg = messages.Message{
				Type: messages.NotConnectedAndWaitMessageType,
			}

			if a.fsm.FSM.Can(fsm.OrganizeSegmentHubElectionAgentFSMEvent) {
				a.fsm.Event(fsm.OrganizeSegmentHubElectionAgentFSMEvent)
			}
		} else {
			msg = messages.Message{
				Type: messages.NotConnectedMessageType,
			}

			// TODO: –ü–æ–∏—Å–∫ —Ö–∞–±–æ–≤ —Å—Ä–µ–¥–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
		}

		if err := json.NewEncoder(stream).Encode(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –Ω–µ—É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É–∑–ª—É %s: %v\n", stream.Conn().RemotePeer(), err)
			return
		}

		stream.Close()
	}
}

// [HUB]
func (a *Agent) handleConnectedOnConnectionRequest(stream libp2pNetwork.Stream) {
	remotePeerID := stream.Conn().RemotePeer()

	_, abonents := a.getSplittedPeers()
	abonentsPeerInfos := make([]messages.InfoAboutSegmentPeerInfo, 0)

	for peerID, peerInfo := range abonents {
		addrs := a.node.PeerAddrs(peerID)

		abonentsPeerInfos = append(abonentsPeerInfos, messages.InfoAboutSegmentPeerInfo{
			ID:    peerID,
			IsHub: peerInfo.IsHub,
			Addrs: addrs,
		})
	}

	body := messages.ConnectedMessageBody{
		Peers: abonentsPeerInfos,
	}

	if marshaledBody, err := json.Marshal(body); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Ç–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
		return
	} else {
		infoAboutSegmentMessage := messages.Message{
			Type: messages.ConnectedMessageType,
			Body: marshaledBody,
		}

		if err := json.NewEncoder(stream).Encode(infoAboutSegmentMessage); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É–∑–ª–∞ %s: %v\n", remotePeerID, err)
			return
		}
	}

	log.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω –Ω–æ–≤—ã–π —É–∑–µ–ª %s\n", remotePeerID)

	a.peers[remotePeerID] = AgentPeerInfo{
		ID:    remotePeerID,
		IsHub: false,
		Peers: nil,
	}
}

// [HUB] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ —Ö–∞–±–∞–º
func (a *Agent) broadcastToHubsInfoAboutMe() {
	a.peersMutex.RLock()
	defer a.peersMutex.RUnlock()

	status := a.getHubSlotsStatus()

	hubs, _ := a.getSplittedPeers()
	hubsPeerIDs := make([]peer.ID, 0)

	for peerID := range hubs {
		hubsPeerIDs = append(hubsPeerIDs, peerID)
	}

	if len(hubsPeerIDs) == 0 {
		return
	}

	infoAboutMe := messages.InfoAboutMeForHubsMessageBody{
		ID:     a.node.Host.ID().String(),
		Addrs:  network.MultiaddrsToMultiaddrStrs(a.node.Host.Addrs()),
		Status: status,
	}

	if marshaledBody, err := json.Marshal(infoAboutMe); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Ç–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
		return
	} else {

		infoAboutMeMessage := messages.Message{
			Type: messages.InfoAboutMeForHubsMessageType,
			Body: marshaledBody,
		}

		if marshaledMessage, err := json.Marshal(infoAboutMeMessage); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
			return
		} else {
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ broadcast-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ–±–µ")
			a.node.BroadcastToPeers(ProtocolID, hubsPeerIDs, marshaledMessage)
		}
	}
}

// [ABONENT]
func (a *Agent) handleInfoAboutHub(info messages.InfoAboutMeForHubsMessageBody) {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	peerID, err := peer.Decode(info.ID)
	if err != nil {
		log.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å info.ID –≤ peer.ID:", info.ID, err)
		return
	}

	p, found := a.peers[peerID]
	if !found {
		return
	}

	if !p.IsHub {
		p.IsHub = true
		a.peers[peerID] = p
		log.Printf("‚òùÔ∏è –ü–∏—Ä %s —Å—Ç–∞–ª —Ö–∞–±–æ–º", info.ID)
	}
}

// [HUB]
func (a *Agent) broadcastToSegmentInfoAboutSegment() {
	a.peersMutex.RLock()
	defer a.peersMutex.RUnlock()

	_, abonents := a.getSplittedPeers()
	abonentsPeerIDs := make([]peer.ID, 0)
	abonentsPeerInfos := make([]messages.InfoAboutSegmentPeerInfo, 0)

	for peerID, peerInfo := range abonents {
		addrs := a.node.PeerAddrs(peerID)
		abonentsPeerIDs = append(abonentsPeerIDs, peerID)

		abonentsPeerInfos = append(abonentsPeerInfos, messages.InfoAboutSegmentPeerInfo{
			ID:    peerID,
			IsHub: peerInfo.IsHub,
			Addrs: addrs,
		})
	}

	if len(abonentsPeerIDs) == 0 {
		return
	}

	infoAboutSegment := messages.InfoAboutSegmentMessageBody{
		Peers: abonentsPeerInfos,
	}

	if marshaledBody, err := json.Marshal(infoAboutSegment); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Ç–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
		return
	} else {

		infoAboutSegmentMessage := messages.Message{
			Type: messages.InfoAboutSegmentMessageType,
			Body: marshaledBody,
		}

		if marshaledMessage, err := json.Marshal(infoAboutSegmentMessage); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
			return
		} else {
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ broadcast-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ–≥–º–µ–Ω—Ç–µ %v", abonentsPeerIDs)
			a.node.BroadcastToPeers(ProtocolID, abonentsPeerIDs, marshaledMessage)
		}
	}
}

// [ABONENT]
func (a *Agent) handleInfoAboutSegment(hubID peer.ID, peers []messages.InfoAboutSegmentPeerInfo) {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	if _, ok := a.peers[hubID]; !ok {
		log.Println("–≠—Ç–æ –Ω–µ –º–æ–π —Ö–∞–±: ", hubID)
		return
	}

	for _, p := range peers {
		mas, err := network.MultiaddrsStrsToMultiaddrs(p.Addrs)

		if err != nil {
			log.Printf("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–∏—Ä–∞ %s: %v", p.ID, err)
			continue
		}

		connectedness := a.node.Host.Network().Connectedness(p.ID)

		if connectedness == libp2pNetwork.Connected || p.ID == a.node.Host.ID() {
			a.peers[hubID].Peers[p.ID] = AgentPeerInfoPeer{
				ID:    p.ID,
				Addrs: p.Addrs,
				IsHub: p.IsHub,
			}
		} else {
			info := peer.AddrInfo{
				ID:    p.ID,
				Addrs: mas,
			}

			if err := a.node.Connect(info); err != nil {
				log.Printf("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–∏—Ä–∞ %s: %v", p.ID, err)
			} else {
				a.node.Host.ConnManager().Protect(info.ID, "permanent")
				a.peers[hubID].Peers[p.ID] = AgentPeerInfoPeer{
					ID:    p.ID,
					Addrs: p.Addrs,
					IsHub: p.IsHub,
				}
			}
		}
	}

	log.Printf("üü¶ –ú–æ–∏ –ø–∏—Ä—ã %d --- %v", len(a.peers), a.peers)
}

// [HUB]
func (a *Agent) organizeSegmentHubElection() {
	_, abonents := a.getSplittedPeers()

	if len(abonents) < 1 {
		return
	} else {
		var abonent AgentPeerInfo
		for _, a := range abonents {
			abonent = a
			break
		}

		var message messages.Message
		if len(abonents) == 1 {
			// –ê–±–æ–Ω–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–∞–±–æ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–Ω—Ç –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–∞–±–æ–º")
			message = messages.Message{
				Type: messages.BecomeOnlyOneHubMessageType,
			}
		} else {
			// –ü–µ—Ä–≤—ã–π –∞–±–æ–Ω–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –≤—ã–±–æ—Ä–æ–≤ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∑–Ω–∞–µ—Ç
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä—ã —Å—Ä–µ–¥–∏ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞")

			_, abonents := a.getSplittedPeers()
			abonentsPeerInfos := make([]messages.InfoAboutSegmentPeerInfo, 0)

			for peerID, peerInfo := range abonents {
				addrs := a.node.PeerAddrs(peerID)

				abonentsPeerInfos = append(abonentsPeerInfos, messages.InfoAboutSegmentPeerInfo{
					ID:    peerID,
					IsHub: peerInfo.IsHub,
					Addrs: addrs,
				})
			}

			body := messages.InitializeElectionRequestMessageBody{
				Peers: abonentsPeerInfos,
			}

			if marshaledBody, err := json.Marshal(body); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Ç–µ–ª–∞ InitializeElectionRequestMessageBody:", err)
				return
			} else {
				message = messages.Message{
					Type: messages.InitializeElectionRequestMessageType,
					Body: marshaledBody,
				}
			}

		}

		s, err := a.node.Host.NewStream(context.Background(), abonent.ID, ProtocolID)
		if err != nil {
			log.Println(err)
			return
		}

		if err := json.NewEncoder(s).Encode(message); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", err)
			return
		}

		s.Close()
	}
}

// [ABONENT]
func (a *Agent) prepareForElection(segmentPeers []AgentPeerInfoPeer) {
	config := raft.DefaultConfig()
	config.LocalID = raft.ServerID(a.node.Host.ID().String())
	config.Logger = hclog.New(&hclog.LoggerOptions{
		Name:  "raft",
		Level: hclog.Error,
	})

	store := raft.NewInmemStore()
	logStore := raft.NewInmemStore()
	snapshotStore := raft.NewDiscardSnapshotStore()

	transport, err := raftnet.NewLibp2pTransport(a.node.Host, 10*time.Second)
	if err != nil {
		log.Printf("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ transport –¥–ª—è –≤—ã–±–æ—Ä–æ–≤ –Ω–æ–≤–æ–≥–æ —Ö–∞–±–∞: %v", err)
		return
	}

	raftNode, err := raft.NewRaft(config, &hubelection.HubElectionRaftFSM{}, logStore, store, snapshotStore, transport)
	if err != nil {
		log.Printf("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ raftNode –¥–ª—è –≤—ã–±–æ—Ä–æ–≤ –Ω–æ–≤–æ–≥–æ —Ö–∞–±–∞: %v", err)
		return
	}

	var servers []raft.Server
	for _, segmentPeer := range segmentPeers {
		if len(segmentPeer.Addrs) > 0 {
			servers = append(servers, raft.Server{
				ID:      raft.ServerID(segmentPeer.ID.String()),
				Address: raft.ServerAddress(segmentPeer.Addrs[0]),
			})
		}
	}

	cfg := raft.Configuration{
		Servers: servers,
	}

	raftNode.BootstrapCluster(cfg)

	observerlCn := make(chan raft.Observation, 1)
	obs := raft.NewObserver(
		observerlCn,
		false,
		func(o *raft.Observation) bool {
			_, ok := o.Data.(raft.LeaderObservation)
			return ok
		},
	)

	raftNode.RegisterObserver(obs)
	defer raftNode.DeregisterObserver(obs)

	for {
		select {
		case obsEvent := <-observerlCn:
			if leaderObs, ok := obsEvent.Data.(raft.LeaderObservation); ok {
				if leaderObs.LeaderID == raft.ServerID(a.node.Host.ID().String()) {
					fmt.Println("üëë –Ø –≤—ã–±—Ä–∞–Ω —Ö–∞–±–æ–º")
					a.fsm.Event(fsm.BecameHubAfterElectionFSMEvent)
				} else {
					leaderPeerID, err := peer.Decode(string(leaderObs.LeaderID))
					if err != nil {
						log.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å LeaderID –≤ peer.ID:", leaderObs.LeaderID, err)
					} else {
						leaderAddrs := a.node.Host.Peerstore().Addrs(leaderPeerID)
						fmt.Println("üëë –Ø –Ω–µ –≤—ã–±—Ä–∞–Ω —Ö–∞–±–æ–º. –¢–µ–ø–µ—Ä—å –º–æ–π —Ö–∞–± –æ–Ω:", leaderAddrs, leaderPeerID)
						a.fsm.Event(fsm.BecameAbonentAfterElectionFSMEvent, leaderAddrs[0].String(), leaderPeerID.String())
					}
				}

				time.Sleep(5 * time.Second)
				raftNode.Shutdown()

				return
			}
		}
	}
}

// [ABONENT]
func (a *Agent) initializeElectionForMySegment(segmentPeers []AgentPeerInfoPeer) {
	segmentPeerInfos := make([]messages.InfoAboutSegmentPeerInfo, 0)

	for _, peerInfo := range segmentPeers {
		addrs := a.node.PeerAddrs(peerInfo.ID)

		segmentPeerInfos = append(segmentPeerInfos, messages.InfoAboutSegmentPeerInfo{
			ID:    peerInfo.ID,
			IsHub: peerInfo.IsHub,
			Addrs: addrs,
		})
	}

	body := messages.ElectionRequestMessageBody{
		Peers: segmentPeerInfos,
	}

	if marshaledBody, err := json.Marshal(body); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Ç–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
		return
	} else {
		infoAboutSegmentMessage := messages.Message{
			Type: messages.ElectionRequestMessageType,
			Body: marshaledBody,
		}

		if marshalledMessage, err := json.Marshal(infoAboutSegmentMessage); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–ª–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
		} else {
			for _, p := range segmentPeers {
				if p.ID == a.node.Host.ID() {
					continue
				}

				stream, err := a.node.Host.NewStream(context.Background(), p.ID, ProtocolID)
				if err != nil {
					log.Println(err)
					return
				}

				if _, err := stream.Write(append(marshalledMessage, '\n')); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", err)
					return
				}

				stream.Close()
			}
		}
	}

	a.prepareForElection(segmentPeers)
}
