package agent

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"regexp"
	"strings"
	"sync"
	"time"

	"github.com/hashicorp/raft"
	raftnet "github.com/libp2p/go-libp2p-raft"
	libp2pNetwork "github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	looplabFSM "github.com/looplab/fsm"
	"github.com/multiformats/go-multiaddr"
	"github.com/ruslanonly/p2p/internal/agent/messages"
	"github.com/ruslanonly/p2p/internal/consensus/hubelection"
	"github.com/ruslanonly/p2p/internal/fsm"
	"github.com/ruslanonly/p2p/internal/network"
)

type AgentPeerInfoPeer struct {
	ID    peer.ID
	Addrs []string
	IsHub bool
}

type AgentPeerInfo struct {
	ID    peer.ID
	IsHub bool
	Peers map[peer.ID]AgentPeerInfoPeer
}

type Agent struct {
	node *network.LibP2PNode
	ctx  context.Context
	fsm  *fsm.AgentFSM

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç—ã –∏ —Ö–∞–±—ã
	peers      map[peer.ID]AgentPeerInfo
	peersMutex sync.RWMutex

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ö–∞–±–æ–≤
	peersLimit int
}

type StartOptions struct {
	BootstrapIP     string
	BootstrapPeerID string
}

func NewAgent(ctx context.Context, peersLimit, port int) (*Agent, error) {
	libp2pNode, err := network.NewLibP2PNode(ctx, port)

	if err != nil {
		log.Fatalf("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: %v", err)
	}

	agent := &Agent{
		node:       libp2pNode,
		ctx:        ctx,
		peers:      make(map[peer.ID]AgentPeerInfo),
		peersLimit: peersLimit,
	}

	return agent, nil
}

func (a *Agent) getSplittedPeers() (map[peer.ID]AgentPeerInfo, map[peer.ID]AgentPeerInfo) {
	hubs := make(map[peer.ID]AgentPeerInfo)
	abonents := make(map[peer.ID]AgentPeerInfo)

	a.peersMutex.RLock()
	for peerID, peerInfo := range a.peers {
		if peerInfo.IsHub {
			hubs[peerID] = peerInfo
		} else {
			abonents[peerID] = peerInfo
		}
	}
	a.peersMutex.RUnlock()

	return hubs, abonents
}

func (a *Agent) isPeersLimitExceeded() bool {
	a.peersMutex.RLock()
	out := len(a.peers) >= a.peersLimit
	a.peersMutex.RUnlock()

	return out
}

func (a *Agent) getHubSlotsStatus() messages.HubSlotsStatus {
	a.peersMutex.RLock()
	defer a.peersMutex.RUnlock()
	abonents, _ := a.getSplittedPeers()

	hasAbonents := len(abonents) == 0
	var status messages.HubSlotsStatus

	if !a.isPeersLimitExceeded() {
		status = messages.FreeHubSlotsStatus
	} else if hasAbonents {
		status = messages.FullHavingAbonentsHubSlotsStatus
	} else {
		status = messages.FullNotHavingAbonentsHubSlotsStatus
	}

	return status
}

func (a *Agent) Start(options *StartOptions) {
	a.node.PrintHostInfo()

	a.fsm = fsm.NewAgentFSM(
		a.ctx,
		looplabFSM.Callbacks{
			"enter_state": func(e_ context.Context, e *looplabFSM.Event) {
				log.Printf("üì¶ FSM –ø–µ—Ä–µ—Ö–æ–¥: %s -> %s –ø–æ —Å–æ–±—ã—Ç–∏—é '%s' —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ %s", e.Src, e.Dst, e.Event, e.Args)
			},
			fsm.ConnectingToHubAgentFSMState: func(e_ context.Context, e *looplabFSM.Event) {
				bootstrapIP, ok1 := e.Args[0].(string)
				bootstrapPeerID, ok2 := e.Args[1].(string)
				if !ok1 || !ok2 {
					log.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è ReadInitialSettingsAgentFSMEvent")
					return
				}

				a.bootstrap(bootstrapIP, bootstrapPeerID)
				e.FSM.SetMetadata(fsm.RoleAgentFSMMetadataKey, fsm.AbonentRole)
			},
			fsm.EnterStateFSMCallbackName(fsm.ListeningMessagesAsHubAgentFSMState): func(e_ context.Context, e *looplabFSM.Event) {
				e.FSM.SetMetadata(fsm.RoleAgentFSMMetadataKey, fsm.HubRole)
				a.startStream()

				infoAboutMeCtx, infoAboutMeCancelCtx := context.WithCancel(context.Background())

				e.FSM.SetMetadata("infoAboutMeCtx", infoAboutMeCtx)
				e.FSM.SetMetadata("infoAboutMeCancelCtx", infoAboutMeCancelCtx)

				go func(ctx context.Context) {
					ticker := time.NewTicker(10 * time.Second)
					defer ticker.Stop()

					for {
						select {
						case <-ctx.Done():
							log.Println("üõë –¶–∏–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ—Ç–º–µ–Ω—ë–Ω —á–µ—Ä–µ–∑ cancel)")
							return
						case <-ticker.C:
							a.broadcastToHubsInfoAboutMe()
							a.broadcastToSegmentInfoAboutSegment()
						}
					}
				}(infoAboutMeCtx)
			},
			fsm.LeaveStateFSMCallbackName(fsm.ListeningMessagesAsHubAgentFSMState): func(e_ context.Context, e *looplabFSM.Event) {

			},
			fsm.EnterStateFSMCallbackName(fsm.ListeningMessagesAsAbonentAgentFSMState): func(e_ context.Context, e *looplabFSM.Event) {
				e.FSM.SetMetadata(fsm.RoleAgentFSMMetadataKey, fsm.AbonentRole)
				a.startStream()
			},
			fsm.OrganizingSegmentHubElectionAgentFSMState: func(e_ context.Context, e *looplabFSM.Event) {
				a.organizeSegmentHubElection()
			},
			fsm.EnterStateFSMCallbackName(fsm.ElectingNewHubAgentFSMState): func(e_ context.Context, e *looplabFSM.Event) {

			},
		},
	)

	if options != nil {
		// –£–∑–µ–ª –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞–±–æ–Ω–µ–Ω—Ç
		a.fsm.Event(fsm.ReadInitialSettingsAgentFSMEvent, options.BootstrapIP, options.BootstrapPeerID)
	} else {
		// –£–∑–µ–ª –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∫–∞–∫ —Ö–∞–±
		a.fsm.Event(fsm.BecomeHubAgentFSMEvent)
	}

	<-a.ctx.Done()
	fmt.Println("–ê–≥–µ–Ω—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
	_ = a.node.Close()
}

func (a *Agent) isHub() bool {
	raw, ok := a.fsm.FSM.Metadata(fsm.RoleAgentFSMMetadataKey)
	metadataRole, err := raw.(fsm.RoleAgentFSMMetadataValue)
	if !ok || err {
		log.Println("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FSM Metadata Role")
	}

	return metadataRole == fsm.HubRole
}

func (a *Agent) isAbonent() bool {
	raw, ok := a.fsm.FSM.Metadata(fsm.RoleAgentFSMMetadataKey)
	metadataRole, err := raw.(fsm.RoleAgentFSMMetadataValue)
	if !ok || err {
		log.Println("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FSM Metadata Role")
	}

	return metadataRole == fsm.AbonentRole
}

func (a *Agent) bootstrap(ip, peerID string) {
	period := 10 * time.Second

	if ip == "" {
		log.Println("BOOTSTRAP_IP –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–≥–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –ø–µ—Ä–≤—ã–π —É–∑–µ–ª (hub?)")
		return
	}

	bootstrapAddr := fmt.Sprintf("/ip4/%s/tcp/5000/p2p/%s", ip, peerID)
	maddr, err := multiaddr.NewMultiaddr(bootstrapAddr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ bootstrap: %v", err)
	}

	log.Printf("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap-—É–∑–ª—É: %s", maddr.String())

	for {
		info, err := peer.AddrInfoFromP2pAddr(maddr)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ peer.AddrInfo: %v", err)
			time.Sleep(period)
			continue
		}

		if err := a.node.Connect(*info); err != nil {
			log.Printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap –Ω–µ —É–¥–∞–ª–æ—Å—å: %v. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %s...", err, period)
			if strings.Contains(err.Error(), "peer id mismatch") {
				re := regexp.MustCompile(`remote key matches ([\w\d]+)`)
				matches := re.FindStringSubmatch(err.Error())
				if len(matches) > 1 {
					actualBootstrapPeerID := matches[1]
					log.Printf("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π PeerID: %s", actualBootstrapPeerID)
					a.bootstrap(ip, actualBootstrapPeerID)
					break
				}
			}
			time.Sleep(period)
		} else {
			s, err := a.node.Host.NewStream(context.Background(), info.ID, ProtocolID)
			if err != nil {
				log.Println(err)
				return
			}

			msg := messages.Message{
				Type: messages.ConnectRequestMessageType,
			}

			if err := json.NewEncoder(s).Encode(msg); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:", err)
				return
			}

			reader := bufio.NewReader(s)
			responseRaw, err := reader.ReadString('\n')
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", err)
				return
			}

			var message messages.Message
			if err := json.Unmarshal([]byte(responseRaw), &message); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:", err)
				return
			}

			if message.Type == messages.ConnectedMessageType {
				log.Print("–Ø –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ö–∞–±—É")
				a.peersMutex.Lock()
				a.peers[info.ID] = AgentPeerInfo{
					ID:    info.ID,
					IsHub: true,
					Peers: make(map[peer.ID]AgentPeerInfoPeer, 0),
				}
				a.peersMutex.Unlock()
				a.fsm.Event(fsm.ConnectedToHubAgentFSMEvent)
			} else if message.Type == messages.NotConnectedMessageType {
				log.Print("–£–∑–µ–ª –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
				a.fsm.Event(fsm.NotConnectedToHubAgentFSMEvent, ip, peerID)
			}

			break
		}
	}
}

func (a *Agent) startStream() {
	log.Println("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è hub-–ø–æ—Ç–æ–∫–∞")

	a.node.SetStreamHandler(ProtocolID, a.streamHandler)

	a.node.Host.Network().Notify(a.node.Host.ConnManager().Notifee())

}

func (a *Agent) closeStream() {
	a.node.RemoveStreamHandler(ProtocolID)
}

func (a *Agent) streamHandler(stream libp2pNetwork.Stream) {
	buf := bufio.NewReader(stream)
	raw, err := buf.ReadString('\n')

	if err != nil {
		log.Println(buf)
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", raw)

	var msg messages.Message
	if err := json.Unmarshal([]byte(raw), &msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	if msg.Type == messages.ConnectRequestMessageType {
		a.handleConnectionRequestMessage(stream)
	} else if msg.Type == messages.BecomeOnlyOneHubMessageType {
		a.fsm.Event(fsm.BecomeHubAgentFSMEvent)
	} else if msg.Type == messages.InitializeElectionRequestMessageType {
		err := a.fsm.Event(fsm.ElectNewHubRequestFSMEvent)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ FSM –ø–µ—Ä–µ—Ö–æ–¥–µ: %v", err)
		}
	} else if msg.Type == messages.InfoAboutSegmentMessageType {
		a.handleInfoAboutSegment(stream.Conn().RemotePeer(), msg)
	}
}

// [HUB] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (a *Agent) handleConnectionRequestMessage(stream libp2pNetwork.Stream) {
	remotePeerID := stream.Conn().RemotePeer()

	slotsStatus := a.getHubSlotsStatus()
	var msg messages.Message
	if slotsStatus == messages.FreeHubSlotsStatus {
		a.peersMutex.Lock()
		a.peers[remotePeerID] = AgentPeerInfo{
			ID:    remotePeerID,
			IsHub: false,
			Peers: nil,
		}
		count := len(a.peers)
		a.peersMutex.Unlock()
		log.Print("–ü–æ–¥–∫–ª—é—á–µ–Ω", remotePeerID, slotsStatus, count, a.peersLimit)

		msg = messages.Message{
			Type: messages.ConnectedMessageType,
		}
	} else if slotsStatus == messages.FullHavingAbonentsHubSlotsStatus {
		msg = messages.Message{
			Type: messages.NotConnectedAndWaitMessageType,
		}

		a.fsm.Event(fsm.OrganizeSegmentHubElectionAgentFSMEvent)
	} else {
		msg = messages.Message{
			Type: messages.NotConnectedMessageType,
		}
	}

	if err := json.NewEncoder(stream).Encode(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –Ω–µ—É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É–∑–ª—É %s: %v\n", stream.Conn().RemotePeer(), err)
		return
	}

	stream.Close()
}

// [HUB] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ —Ö–∞–±–∞–º
func (a *Agent) broadcastToHubsInfoAboutMe() {
	status := a.getHubSlotsStatus()

	hubs, _ := a.getSplittedPeers()
	hubsPeerIDs := make([]peer.ID, 0)

	for peerID := range hubs {
		hubsPeerIDs = append(hubsPeerIDs, peerID)
	}

	if len(hubsPeerIDs) == 0 {
		return
	}

	infoAboutMe := messages.InfoAboutMeForHubsMessageBody{
		ID:     a.node.Host.ID().String(),
		Status: status,
	}

	if marshaledBody, err := json.Marshal(infoAboutMe); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Ç–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
		return
	} else {

		infoAboutMeMessage := messages.Message{
			Type: messages.InfoAboutMeForHubsMessageType,
			Body: marshaledBody,
		}

		if marshaledMessage, err := json.Marshal(infoAboutMeMessage); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
			return
		} else {
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ broadcast-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ–±–µ")
			a.node.BroadcastToPeers(ProtocolID, hubsPeerIDs, marshaledMessage)
		}
	}
}

// [HUB]
func (a *Agent) broadcastToSegmentInfoAboutSegment() {
	_, abonents := a.getSplittedPeers()
	abonentsPeerIDs := make([]peer.ID, 0)
	abonentsPeerInfos := make([]messages.InfoAboutSegmentPeerInfo, 0)

	for peerID, peerInfo := range abonents {
		addrs := a.node.PeerAddrs(peerID)
		abonentsPeerIDs = append(abonentsPeerIDs, peerID)

		abonentsPeerInfos = append(abonentsPeerInfos, messages.InfoAboutSegmentPeerInfo{
			ID:    peerID,
			IsHub: peerInfo.IsHub,
			Addrs: addrs,
		})
	}

	if len(abonentsPeerIDs) == 0 {
		return
	}

	infoAboutSegment := messages.InfoAboutSegmentMessageBody{
		Peers: abonentsPeerInfos,
	}

	if marshaledBody, err := json.Marshal(infoAboutSegment); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Ç–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
		return
	} else {

		infoAboutSegmentMessage := messages.Message{
			Type: messages.InfoAboutSegmentMessageType,
			Body: marshaledBody,
		}

		if marshaledMessage, err := json.Marshal(infoAboutSegmentMessage); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:", err)
			return
		} else {
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ broadcast-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ–≥–º–µ–Ω—Ç–µ", abonentsPeerIDs)
			a.node.BroadcastToPeers(ProtocolID, abonentsPeerIDs, marshaledMessage)
		}
	}
}

// [ABONENT]
func (a *Agent) handleInfoAboutSegment(hubID peer.ID, message messages.Message) {
	var infoAboutSegment messages.InfoAboutSegmentMessageBody
	if err := json.Unmarshal([]byte(message.Body), &infoAboutSegment); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:", err)
		return
	}

	for _, p := range infoAboutSegment.Peers {
		connectedness := a.node.Host.Network().Connectedness(p.ID)

		a.peersMutex.RLock()
		if _, found := a.peers[hubID].Peers[p.ID]; found || connectedness == libp2pNetwork.Connected || p.ID == a.node.Host.ID() || p.ID == hubID {
			a.peersMutex.RUnlock()
			continue
		}
		a.peersMutex.RUnlock()

		mas, err := network.MultiaddrsStrsToMultiaddrs(p.Addrs)

		if err != nil {
			log.Printf("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–∏—Ä–∞ %s: %v", p.ID, err)
			continue
		}

		info := peer.AddrInfo{
			ID:    p.ID,
			Addrs: mas,
		}

		if err := a.node.Connect(info); err != nil {
			log.Printf("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–∏—Ä–∞ %s: %v", p.ID, err)
		} else {
			a.peersMutex.Lock()
			a.peers[hubID].Peers[p.ID] = AgentPeerInfoPeer{
				ID:    p.ID,
				Addrs: p.Addrs,
				IsHub: p.IsHub,
			}
			a.peersMutex.Unlock()
		}
	}

	log.Printf("–ü–∏—Ä—ã —Ö–∞–±–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–≥–º–µ–Ω—Ç–µ: %v", a.peers[hubID].Peers)
}

// [HUB]
func (a *Agent) organizeSegmentHubElection() {
	_, abonents := a.getSplittedPeers()

	if len(abonents) < 1 {
		return
	} else {
		var abonent AgentPeerInfo
		for _, a := range abonents {
			abonent = a
			break
		}

		var message messages.Message
		if len(abonents) == 1 {
			// –ê–±–æ–Ω–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–∞–±–æ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–Ω—Ç –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–∞–±–æ–º")
			message = messages.Message{
				Type: messages.BecomeOnlyOneHubMessageType,
			}
		} else {
			// –ü–µ—Ä–≤—ã–π –∞–±–æ–Ω–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –≤—ã–±–æ—Ä–æ–≤ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∑–Ω–∞–µ—Ç
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä—ã —Å—Ä–µ–¥–∏ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞")
			message = messages.Message{
				Type: messages.InitializeElectionRequestMessageType,
			}
		}

		s, err := a.node.Host.NewStream(context.Background(), abonent.ID, ProtocolID)
		if err != nil {
			log.Println(err)
			return
		}

		if err := json.NewEncoder(s).Encode(message); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", err)
			return
		}

		s.Close()
	}
}

// [ABONENT]
func (a *Agent) initializeElectionForMySegment() {
	peerID := a.node.Host.ID()

	config := raft.DefaultConfig()
	config.LocalID = raft.ServerID(peerID)

	store := raft.NewInmemStore()
	logStore := raft.NewInmemStore()
	snapshotStore := raft.NewDiscardSnapshotStore()

	transport, err := raftnet.NewLibp2pTransport(a.node.Host, 10*time.Second)
	if err != nil {

	}

	raftNode, err := raft.NewRaft(config, &hubelection.HubElectionRaftFSM{}, logStore, store, snapshotStore, transport)
	if err != nil {

	}

	a.fsm.FSM.SetMetadata("RaftNode", raftNode)

	cfg := raft.Configuration{
		Servers: []raft.Server{
			{
				ID:      raft.ServerID(peerID),
				Address: raft.ServerAddress(peerID),
			},
			{
				ID:      raft.ServerID(peerID),
				Address: raft.ServerAddress(peerID),
			},
		},
	}

	raftNode.BootstrapCluster(cfg)

	channel := make(chan raft.Observation, 1)
	obs := raft.NewObserver(
		channel,
		false,
		func(o *raft.Observation) bool {
			_, ok := o.Data.(raft.LeaderObservation)
			return ok
		},
	)

	raftNode.RegisterObserver(obs)
	defer raftNode.DeregisterObserver(obs)

	for {
		select {
		case obsEvent := <-channel:
			if leaderObs, ok := obsEvent.Data.(raft.LeaderObservation); ok {
				fmt.Println("üëë –ù–æ–≤—ã–π –ª–∏–¥–µ—Ä –≤—ã–±—Ä–∞–Ω:", leaderObs.LeaderAddr, leaderObs.LeaderID)
				return
			}
		case <-time.After(10 * time.Second):
			fmt.Println("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ª–∏–¥–µ—Ä–∞")
			return
		}
	}
}
