package agent

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net"
	"strings"
	"sync"
	"time"

	"github.com/ruslanonly/p2p/host/fsm"
)

func sendJSONUDP(addr string, msg Message) {
	conn, err := net.Dial("udp", addr)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ %s: %v", addr, err)
		return
	}
	defer conn.Close()

	data, _ := json.Marshal(msg)
	conn.Write(append(data, '\n'))
}

func sendJSONTCP(conn net.Conn, msg Message) {
    messageBytes, err := json.Marshal(msg)
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON: %v", err)
        return
    }

    _, err = conn.Write(append(messageBytes, '\n'))
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ TCP: %v", err)
    }
}

type Agent struct {
	host          string
	maxPeers      int
	peers         map[string]PeerInfo
	peersMutex    sync.Mutex
	waitingPeers  []string
	fsm           *fsm.AgentFSM
}

type AgentConfiguration struct {
	Host string
	MaxPeers int
}

type BootstrapAddress struct {
	IP string
}

func New(configuration AgentConfiguration) *Agent {
	return &Agent{
		host:          configuration.Host,
		maxPeers:      configuration.MaxPeers,
		peers:         make(map[string]PeerInfo),
		waitingPeers:  make([]string, 0),
	}
}

func (a *Agent) getPeers() map[string]PeerInfo {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	peers := make(map[string]PeerInfo)

	for addr, peerInfo := range a.peers {
		if !peerInfo.IsSuper {
			peers[addr] = peerInfo
		}
	}

	return peers
}

func (a *Agent) getSuperpeers() map[string]PeerInfo {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	superpeers := make(map[string]PeerInfo)

	for addr, peerInfo := range a.peers {
		if peerInfo.IsSuper {
			superpeers[addr] = peerInfo
		}
	}

	return superpeers
}

func (a *Agent) Start(bootstrapAddress *BootstrapAddress) {
	go a.listenUDP()
	go a.listenTCP()
	a.fsm.Fsm.Event(context.Background(), fsm.ReadInitialSettingsAgentFSMEvent, bootstrapAddress)
}


func (a *Agent) listenTCP() {
	addr := fmt.Sprintf("%s:%d", a.host, 55000)
	listener, err := net.Listen("tcp", addr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
	defer listener.Close()

	for {
		conn, err := listener.Accept()

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
			continue
		}
		go a.handleTCPConnection(conn)
	}
}

func (a *Agent) handleTCPConnection(conn net.Conn) {
	defer conn.Close()

	reader := bufio.NewReader(conn)
	messageStr, err := reader.ReadString('\n')
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
		return
	}

	var msg Message
	if err := json.Unmarshal([]byte(messageStr), &msg); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	senderIP, _, err := net.SplitHostPort(conn.RemoteAddr().String())
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞: %v", err)
		return
	}

	log.Printf("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %+v", senderIP, msg)

	switch msg.Type {
	case ConnectRequestMessageType:
		
	default:
		log.Printf("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: %s", msg.Type)
	}
}

func (a *Agent) listenUDP() {
	addr := net.UDPAddr{
		Port: 55001,
		IP:   net.ParseIP(a.host),
	}

	conn, err := net.ListenUDP("udp", &addr)

	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å UDP —Å–µ—Ä–≤–µ—Ä: %v", err)
	}
	defer conn.Close()

	buffer := make([]byte, 1024)
	for {
		n, remoteAddr, err := conn.ReadFromUDP(buffer)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ UDP: %v", err)
			continue
		}

		message := strings.TrimSpace(string(buffer[:n]))
		log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ UDP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", remoteAddr, message)

		go a.handleUDPMessage(message, remoteAddr)
	}
}

func (a *Agent) handleUDPMessage(message string, remoteAddr *net.UDPAddr) {
	var msg Message
	if err := json.Unmarshal([]byte(message), &msg); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: %v", err)
		return
	}

	switch msg.Type {
		
	}
}

func (a *Agent) bootstrap(bootstrap BootstrapAddress) {
	log.Printf("–£–∑–µ–ª –Ω–∞—á–∞–ª bootstraping-–ø—Ä–æ—Ü–µ—Å—Å")

	maxRetries := 5
	delay := 5 * time.Second

	for i := 1; i <= maxRetries; i++ {
		addr := fmt.Sprintf("%s:%d", bootstrap.IP, 55000)
		conn, err := net.Dial("tcp", addr)

		if err != nil {
			log.Printf("‚ö† –ü–æ–ø—ã—Ç–∫–∞ %d/%d ‚Äî –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", i, maxRetries, err)
			time.Sleep(delay)
			continue
		}

		sendJSONTCP(conn, Message{Type: ConnectRequestMessageType})
		log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ bootstrap –Ω–∞ –∞–¥—Ä–µ—Å %s", addr)

		response, err := bufio.NewReader(conn).ReadString('\n')
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å—É–ø–µ—Ä–ø–∏—Ä–∞: %v", err)
			conn.Close()
			time.Sleep(delay)
			continue
		}

		log.Printf("–û—Ç–≤–µ—Ç —Å—É–ø–µ—Ä–ø–∏—Ä–∞: %s", response)
		conn.Close()

		var message Message
		if err := json.Unmarshal([]byte(response), &message); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return
		}

		if message.Type == ConnectedMessageType {
			a.peers[bootstrap.IP] = PeerInfo{
				IP: bootstrap.IP,
				IsSuper: true,
			}
			return
		} else if message.Type == WaitMessageType {
			log.Printf("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–ø–∏—Ä–∞...")
			return
		}
	}

	log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", maxRetries)
}