package agent

import (
	"bufio"
	"fmt"
	"log"
	"net"
	"strconv"
	"strings"
	"sync"
	"time"
)

type PeerInfo struct {
	IP string
	IsSuper   bool
}

type Agent struct {
	host          string
	maxPeers      int
	peers         map[string]PeerInfo
	peersMutex    sync.Mutex
	waitingPeers  []string
}

type AgentConfiguration struct {
	Host string
	MaxPeers int
}

type Address struct {
	IP string
	Port int
}

func GetAddress(addrStr string) (Address, error) {
	parts := strings.Split(addrStr, ":")
	if len(parts) != 2 {
		return Address{}, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: %s", addrStr)
	}

	port, err := strconv.Atoi(parts[1])
	if err != nil {
		return Address{}, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ—Ä—Ç: %s", parts[1])
	}

	return Address{
		IP:   parts[0],
		Port: port,
	}, nil
}

func New(configuration AgentConfiguration) *Agent {
	return &Agent{
		host:          configuration.Host,
		maxPeers:      configuration.MaxPeers,
		peers:         make(map[string]PeerInfo),
		waitingPeers:  make([]string, 0),
	}
}

func (a *Agent) getPeers() map[string]PeerInfo {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	peers := make(map[string]PeerInfo)

	for addr, peerInfo := range a.peers {
		if !peerInfo.IsSuper {
			peers[addr] = peerInfo
		}
	}

	return peers
}

func (a *Agent) getSuperpeers() map[string]PeerInfo {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	superpeers := make(map[string]PeerInfo)

	for addr, peerInfo := range a.peers {
		if peerInfo.IsSuper {
			superpeers[addr] = peerInfo
		}
	}

	return superpeers
}

func (a *Agent) Start(bootstrapAddress *Address) {
	go a.listenUDP()
	a.listenTCP(bootstrapAddress)
}


func (a *Agent) listenTCP(bootstrapAddress *Address) {
	addr := fmt.Sprintf("%s:%d", a.host, 55000)
	listener, err := net.Listen("tcp", addr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
	defer listener.Close()

	if (bootstrapAddress != nil) {
		log.Printf("üî• –£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É %s", a.host)
		a.bootstrap(*bootstrapAddress)
	} else {
		log.Printf("üî• –£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É %s –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–ø–∏—Ä–æ–º", a.host)
	}

	for {
		conn, err := listener.Accept()

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
			continue
		}
		go a.handleTCPConnection(conn)
	}
}

func (a *Agent) handleTCPConnection(conn net.Conn) {
	defer conn.Close()
	reader := bufio.NewReader(conn)
	message, err := reader.ReadString('\n')

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
		return
	}

	message = strings.TrimSpace(message)
	remoteIP, _, err := net.SplitHostPort(conn.RemoteAddr().String())
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞: %v", err)
		return
	}

	log.Printf("üì© –ü–æ–ª—É—á–µ–Ω–æ TCP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", remoteIP, message)

	switch {
	case strings.HasPrefix(message, "CONNECT_REQUEST"):
		a.peersMutex.Lock()
		if len(a.peers) < a.maxPeers {
			a.peers[remoteIP] = PeerInfo{
				IP: remoteIP,
				IsSuper: false,
			}
			a.peersMutex.Unlock()
			fmt.Fprintf(conn, "CONNECTED %s\n", a.host)
			log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –Ω–æ–≤—ã–π —É–∑–µ–ª: %s", remoteIP)
		} else {
			a.peersMutex.Unlock()

			a.waitingPeers = append(a.waitingPeers, remoteIP)
			fmt.Fprintf(conn, "WAIT\n")
			log.Printf("‚è≥ –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è: %s", remoteIP)

			superpeers := a.getSuperpeers()

			if (len(superpeers) > 0) {
				log.Printf("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Å—É–ø–µ—Ä–ø–∏—Ä–∞ —Å—Ä–µ–¥–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö")

				for super := range superpeers {
					conn, err := net.Dial("udp", super)
					if err != nil {
						continue
					}

					defer conn.Close()

					_, err = conn.Write([]byte("FIND_SUPERPEER\n"))

					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP: %v", err)
					}
				}
			} else {
				log.Printf("‚è≥ –ò–Ω–∏—Ü–∏–∏—Ä—É—é—Ç—Å—è –≤—ã–±–æ—Ä—ã –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–ø–∏—Ä–∞ —Å—Ä–µ–¥–∏ —Å–≤–æ–∏—Ö –ø–∏—Ä–æ–≤")

				peers := a.getPeers()

				for peerIP := range peers {
					remoteAddr := &net.UDPAddr{
						IP: net.ParseIP(peerIP),
						Port: 55001,
					}

					conn, err := net.Dial("udp", remoteAddr.String())

					if err != nil {
						log.Println(remoteAddr.IP, remoteAddr.Port, remoteAddr.String())
						continue
					}
					
					defer conn.Close()

					log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ ELECT_NEW_SUPERPEER —É–∑–ª—É %s", peerIP)

					_, err = conn.Write([]byte("ELECT_NEW_SUPERPEER %s\n"))

					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP: %v", err)
					}
				}
			}
	}
	case message == "DISCOVER_PEERS":
		a.peersMutex.Lock()
		peersList := make([]string, 0, len(a.peers))
		for peer := range a.peers {
			peersList = append(peersList, peer)
		}
		a.peersMutex.Unlock()
		response := strings.Join(peersList, "\n") + "\n"
		conn.Write([]byte(response))
		log.Printf("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤: %s", response)
	}
}

func (a *Agent) listenUDP() {
	addr := net.UDPAddr{
		Port: 55001,
		IP:   net.ParseIP(a.host),
	}

	conn, err := net.ListenUDP("udp", &addr)

	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å UDP —Å–µ—Ä–≤–µ—Ä: %v", err)
	}
	defer conn.Close()

	buffer := make([]byte, 1024)
	for {
		n, remoteAddr, err := conn.ReadFromUDP(buffer)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ UDP: %v", err)
			continue
		}

		message := strings.TrimSpace(string(buffer[:n]))
		log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ UDP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", remoteAddr, message)

		go a.handleUDPMessage(message, remoteAddr)
	}
}

func (a *Agent) handleUDPMessage(message string, remoteAddr *net.UDPAddr) {
	switch {
		case message == "FIND_FREE_SUPERPEER": {
			log.Println("üîé –û–±—Ä–∞–±–æ—Ç–∫–∞ FIND_FREE_SUPERPEER")

			if len(a.peers) < a.maxPeers {
				log.Printf("‚úÖ –Ø —Å—É–ø–µ—Ä–ø–∏—Ä —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ—Å—Ç–æ–º (%d/%d –ø–∏—Ä–æ–≤)", len(a.peers), a.maxPeers)
				log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ FREE_SUPERPEER %s:%d", a.host, 55001)

				address := net.UDPAddr{IP: remoteAddr.IP, Port: 55001}
				conn, err := net.Dial("udp", address.String())
				if err != nil {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å %s: %v", remoteAddr.String(), err)
					return
				}
				defer conn.Close()

				msg := fmt.Sprintf("FREE_SUPERPEER %s:%d\n", a.host, 55001)
				_, err = conn.Write([]byte(msg))

				if err != nil {
					log.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP: %v", err)
				}
			} else {
				log.Printf("‚ùå –ù–µ—Ç –º–µ—Å—Ç–∞ —É —Å—É–ø–µ—Ä–ø–∏—Ä–∞, –ø–µ—Ä–µ—Å—ã–ª–∞—é FIND_FREE_SUPERPEER –¥—Ä—É–≥–∏–º —Å—É–ø–µ—Ä–ø–∏—Ä–∞–º")
				superpeers := a.getSuperpeers()

				for addr := range superpeers {
					if addr == remoteAddr.String() {
						continue
					}

					log.Printf("‚û°Ô∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∞ FIND_FREE_SUPERPEER –Ω–∞ %s", addr)
					conn, err := net.Dial("udp", addr)
					if err != nil {
						log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ FIND_FREE_SUPERPEER –Ω–∞ %s: %v", addr, err)
						continue
					}
					defer conn.Close()

					_, err = conn.Write([]byte("FIND_FREE_SUPERPEER\n"))

					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP: %v", err)
					}
				}
			}
		}

		case strings.HasPrefix(message, "FREE_SUPERPEER_FOR_BOOTSTRAP"): {

			log.Println("ü™ú –û–±—Ä–∞–±–æ—Ç–∫–∞ FREE_SUPERPEER_FOR_BOOTSTRAP")

			addr := strings.TrimSpace(strings.TrimPrefix(message, "FREE_SUPERPEER_FOR_BOOTSTRAP"))
			log.Printf("üì• –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è bootstrap: %s", addr)

			address, err := GetAddress(addr)
			if err != nil {
				log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å: %v", err)
				return
			}

			log.Printf("üöÄ –ó–∞–ø—É—Å–∫ bootstrap —Å %s:%d", address.IP, address.Port)
			a.bootstrap(address)
		}

		case strings.HasPrefix(message, "FREE_SUPERPEER"): {

			log.Println("üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ FREE_SUPERPEER")

			addr := strings.TrimSpace(strings.TrimPrefix(message, "FREE_SUPERPEER"))
			log.Printf("üîó –ê–¥—Ä–µ—Å —Å—É–ø–µ—Ä–ø–∏—Ä–∞: %s", addr)

			for _, waitingPeerAddress := range a.waitingPeers {
				log.Printf("üì® –†–∞—Å—Å—ã–ª–∫–∞ FREE_SUPERPEER_FOR_BOOTSTRAP %s -> %s", addr, waitingPeerAddress)

				conn, err := net.Dial("udp", waitingPeerAddress)
				if err != nil {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ %s: %v", waitingPeerAddress, err)
					continue
				}
				defer conn.Close()

				msg := fmt.Sprintf("FREE_SUPERPEER_FOR_BOOTSTRAP %s\n", addr)
				_, err = conn.Write([]byte(msg))

				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP: %v", err)
				}
			}

			for superpeerAddress := range a.getSuperpeers() {
				log.Printf("üîÅ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ FREE_SUPERPEER -> %s", superpeerAddress)

				conn, err := net.Dial("udp", superpeerAddress)
				if err != nil {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ %s: %v", superpeerAddress, err)
					continue
				}
				defer conn.Close()

				_, err = conn.Write([]byte(message))

				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP: %v", err)
				}
			}
		}

		case strings.HasPrefix(message, "ELECT_NEW_SUPERPEER"): {
			
		}
	}
}


func (a *Agent) bootstrap(bootstrap Address) {
	log.Printf("–£–∑–µ–ª –Ω–∞—á–∞–ª bootstraping-–ø—Ä–æ—Ü–µ—Å—Å")

	maxRetries := 5
	delay := 5 * time.Second

	for i := 1; i <= maxRetries; i++ {
		addr := fmt.Sprintf("%s:%d", bootstrap.IP, 55000)
		conn, err := net.Dial("tcp", addr)

		if err != nil {
			log.Printf("‚ö† –ü–æ–ø—ã—Ç–∫–∞ %d/%d ‚Äî –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", i, maxRetries, err)
			time.Sleep(delay)
			continue
		}

		fmt.Fprintf(conn, "CONNECT_REQUEST\n")
		log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ bootstrap –Ω–∞ –∞–¥—Ä–µ—Å %s", addr)

		response, err := bufio.NewReader(conn).ReadString('\n')
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å—É–ø–µ—Ä–ø–∏—Ä–∞: %v", err)
			conn.Close()
			time.Sleep(delay)
			continue
		}

		response = strings.TrimSpace(response)
		log.Printf("–û—Ç–≤–µ—Ç —Å—É–ø–µ—Ä–ø–∏—Ä–∞: %s", response)
		conn.Close()

		if strings.HasPrefix(response, "CONNECTED") {
			a.peers[bootstrap.IP] = PeerInfo{
				IP: bootstrap.IP,
				IsSuper: true,
			}

			return
		} else if strings.HasPrefix(response, "WAIT") {
			log.Printf("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–ø–∏—Ä–∞...")
			return
		}
	}

	log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", maxRetries)
}


func (a *Agent) discoverPeers(peerAddr string) {
	conn, err := net.Dial("tcp", peerAddr)
	if err != nil {
		log.Printf("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ %s: %v", peerAddr, err)
		return
	}
	defer conn.Close()

	fmt.Fprintf(conn, "DISCOVER_PEERS\n")
	response, _ := bufio.NewReader(conn).ReadString('\n')
	peers := strings.Split(strings.TrimSpace(response), "\n")
	a.peersMutex.Lock()
	for _, peerAddress := range peers {
		if peerAddress != "" {
			a.peers[peerAddress] = PeerInfo{
				IP: peerAddress,
				IsSuper: false,
			}
		}
	}
	a.peersMutex.Unlock()
	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É–∑–ª—ã –æ—Ç %s: %v", peerAddr, peers)
}
