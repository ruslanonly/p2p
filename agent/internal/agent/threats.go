package agent

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net"

	libp2pNetwork "github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/ruslanonly/agent/internal/agent/protocols/threatsproto"
	threatsprotomessages "github.com/ruslanonly/agent/internal/agent/protocols/threatsproto/messages"
)

func (a *Agent) startThreatsStream() {
	log.Println("üî≥ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π threats –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")

	a.node.SetStreamHandler(threatsproto.ProtocolID, a.threatsStreamHandler)
}

func (a *Agent) closeThreatsStream() {
	log.Println("üî≥ –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π threats –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")

	a.node.RemoveStreamHandler(threatsproto.ProtocolID)
}

func (a *Agent) threatsStreamHandler(stream libp2pNetwork.Stream) {
	buf := bufio.NewReader(stream)
	raw, err := buf.ReadString('\n')

	if err != nil {
		fmt.Printf("üî≥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è threats –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: %v\n", err)
		stream.Close()
		return
	}

	var message threatsprotomessages.Message
	if err := json.Unmarshal([]byte(raw), &message); err != nil {
		log.Printf("üî≥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
		return
	}

	if message.Type == threatsprotomessages.BlockTrafficMessageType {
		log.Printf("üî≥ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å %s", message.IP)
		a.threatsIPC.BlockHostMessage(message.IP)
	}

	stream.Close()
}

// [ABONENT]
func (a *Agent) informMyHubAboutRedTraffic(ip net.IP) {
	myHub, found := a.getMyHub()
	if !found {
		return
	}

	log.Printf("üî≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∞—Å–Ω–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ —Å–≤–æ–µ–º—É —Ö–∞–±—É %s", myHub.ID)
	s, err := a.node.Host.NewStream(context.Background(), myHub.ID, threatsproto.ProtocolID)
	if err != nil {
		return
	}

	message := threatsprotomessages.Message{
		Type: threatsprotomessages.RedTrafficMessageType,
		IP:   ip,
	}

	if err := json.NewEncoder(s).Encode(message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∞—Å–Ω–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ: %v\n", err)
		return
	}

	s.Close()
}

// [ABONENT]
func (a *Agent) informMyHubAboutYellowTraffic(ip net.IP) {
	myHub, found := a.getMyHub()
	if !found {
		return
	}

	log.Printf("üî≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–µ–ª—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ —Å–≤–æ–µ–º—É —Ö–∞–±—É %s", myHub.ID)
	s, err := a.node.Host.NewStream(context.Background(), myHub.ID, threatsproto.ProtocolID)
	if err != nil {
		return
	}

	message := threatsprotomessages.Message{
		Type: threatsprotomessages.YellowTrafficMessageType,
		IP:   ip,
	}

	if err := json.NewEncoder(s).Encode(message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∂–µ–ª—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ: %v\n", err)
		return
	}

	s.Close()
}

// [HUB]
func (a *Agent) broadcastBlockTrafficToAbonents(offenderIP net.IP) {
	message := threatsprotomessages.Message{
		IP:   offenderIP,
		Type: threatsprotomessages.BlockTrafficMessageType,
	}

	log.Printf("üü™ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∞—Å–Ω–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ —Å–≤–æ–∏–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º %s", offenderIP)

	_, abonents := a.getSplittedPeers()
	peerIDs := make([]peer.ID, 0)
	for _, abonent := range abonents {
		peerIDs = append(peerIDs, abonent.ID)
	}

	if marshalledMessage, err := json.Marshal(message); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞:", err)
	} else {
		a.node.BroadcastToPeers(threatsproto.ProtocolID, peerIDs, marshalledMessage)
	}
}
