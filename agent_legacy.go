package agent

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net"
	"slices"
	"strings"
	"sync"
	"time"

	"github.com/ruslanonly/p2p/host/fsm"
)

func sendJSONUDP(addr string, msg Message) {
	conn, err := net.Dial("udp", addr)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ %s: %v", addr, err)
		return
	}
	defer conn.Close()

	data, _ := json.Marshal(msg)
	conn.Write(append(data, '\n'))
}

func sendJSONTCP(conn net.Conn, msg Message) {
    messageBytes, err := json.Marshal(msg)
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON: %v", err)
        return
    }

    _, err = conn.Write(append(messageBytes, '\n'))
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ TCP: %v", err)
    }
}

type Agent struct {
	host          string
	maxPeers      int
	peers         map[string]PeerInfo
	peersMutex    sync.Mutex
	waitingPeers  []string
	fsm           *fsm.AgentFSM
}

type AgentConfiguration struct {
	Host string
	MaxPeers int
}

type BootstrapAddress struct {
	IP string
}

func New(configuration AgentConfiguration) *Agent {
	
	return &Agent{
		host:          configuration.Host,
		maxPeers:      configuration.MaxPeers,
		peers:         make(map[string]PeerInfo),
		waitingPeers:  make([]string, 0),
		fsm: fsm.NewAgentFSM(),
	}
}

func (a *Agent) getPeers() map[string]PeerInfo {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	peers := make(map[string]PeerInfo)

	for addr, peerInfo := range a.peers {
		if !peerInfo.IsSuper {
			peers[addr] = peerInfo
		}
	}

	return peers
}

func (a *Agent) getSuperpeers() map[string]PeerInfo {
	a.peersMutex.Lock()
	defer a.peersMutex.Unlock()

	superpeers := make(map[string]PeerInfo)

	for addr, peerInfo := range a.peers {
		if peerInfo.IsSuper {
			superpeers[addr] = peerInfo
		}
	}

	return superpeers
}

func (a *Agent) Start(bootstrapAddress *BootstrapAddress) {
	go a.listenUDP()
	go a.listenTCP()
	a.fsm.Fsm.Event(context.Background(), fsm.ReadInitialSettingsAgentFSMEvent, bootstrapAddress)
}


func (a *Agent) listenTCP() {
	addr := fmt.Sprintf("%s:%d", a.host, 55000)
	listener, err := net.Listen("tcp", addr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
	defer listener.Close()

	for {
		conn, err := listener.Accept()

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
			continue
		}
		go a.handleTCPConnection(conn)
	}
}

func (a *Agent) handleTCPConnection(conn net.Conn) {
	defer conn.Close()

	reader := bufio.NewReader(conn)
	messageStr, err := reader.ReadString('\n')
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
		return
	}

	var msg Message
	if err := json.Unmarshal([]byte(messageStr), &msg); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	senderIP, _, err := net.SplitHostPort(conn.RemoteAddr().String())
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞: %v", err)
		return
	}

	log.Printf("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %+v", senderIP, msg)

	switch msg.Type {
	case ConnectRequestMessageType:
		a.peersMutex.Lock()
		if len(a.peers) < a.maxPeers {
			a.peers[senderIP] = PeerInfo{
				IP:      senderIP,
				IsSuper: false,
			}
			a.peersMutex.Unlock()

			sendJSONTCP(conn, Message{Type: ConnectedMessageType})
			log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –Ω–æ–≤—ã–π —É–∑–µ–ª: %s", senderIP)

			a.reportPeers([]string{senderIP})
		} else {
			a.peersMutex.Unlock()
			a.waitingPeers = append(a.waitingPeers, senderIP)

			sendJSONTCP(conn, Message{Type: WaitMessageType})

			log.Printf("‚è≥ –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è: %s", senderIP)

			superpeers := a.getSuperpeers()
			if len(superpeers) > 0 {
				log.Printf("üîç –ü–æ–∏—Å–∫ —Å—É–ø–µ—Ä–ø–∏—Ä–∞ —Å—Ä–µ–¥–∏ —Ç–µ–∫—É—â–∏—Ö")

				for super := range superpeers {
					sendJSONUDP(super, Message{Type: FindSuperpeerMessageType})
				}
			} else {
				log.Printf("üó≥ –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤—ã–±–æ—Ä–æ–≤ –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–ø–∏—Ä–∞")
				peers := a.getPeers()
				for peerIP := range peers {
					addr := &net.UDPAddr{
						IP:   net.ParseIP(peerIP),
						Port: 55001,
					}

					sendJSONUDP(addr.String(), Message{Type: ElectNewSuperpeerMessageType})
				}
			}
		}

	case DiscoverPeersMessageType:
		a.peersMutex.Lock()
		peersList := make(DiscoverPeersResponse, 0, len(a.peers))
		for _, peerInfo := range a.peers {
			peersList = append(peersList, peerInfo)
		}
		a.peersMutex.Unlock()

		body, err := json.Marshal(peersList)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %v", err)
			return
		}

		conn.Write(body)
	default:
		log.Printf("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: %s", msg.Type)
	}
}

func (a *Agent) listenUDP() {
	addr := net.UDPAddr{
		Port: 55001,
		IP:   net.ParseIP(a.host),
	}

	conn, err := net.ListenUDP("udp", &addr)

	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å UDP —Å–µ—Ä–≤–µ—Ä: %v", err)
	}
	defer conn.Close()

	buffer := make([]byte, 1024)
	for {
		n, remoteAddr, err := conn.ReadFromUDP(buffer)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ UDP: %v", err)
			continue
		}

		message := strings.TrimSpace(string(buffer[:n]))
		log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ UDP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", remoteAddr, message)

		go a.handleUDPMessage(message, remoteAddr)
	}
}

func (a *Agent) handleUDPMessage(message string, remoteAddr *net.UDPAddr) {
	var msg Message
	if err := json.Unmarshal([]byte(message), &msg); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: %v", err)
		return
	}

	switch msg.Type {
		case FindFreeSuperpeerMessageType: {
			log.Println("üîé –û–±—Ä–∞–±–æ—Ç–∫–∞ FIND_FREE_SUPERPEER")

			if len(a.peers) < a.maxPeers {
				log.Printf("‚úÖ –Ø —Å—É–ø–µ—Ä–ø–∏—Ä —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ—Å—Ç–æ–º (%d/%d –ø–∏—Ä–æ–≤)", len(a.peers), a.maxPeers)
				log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ FREE_SUPERPEER %s:%d", a.host, 55001)

				address := net.UDPAddr{IP: remoteAddr.IP, Port: 55001}

				body, err := json.Marshal(FreeSuperpeer{IP: a.host})
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %v", err)
					return
				}

				sendJSONUDP(address.String(), Message{Type: FreeSuperpeerMessageType, Body: body})
			} else {
				log.Printf("‚ùå –ù–µ—Ç –º–µ—Å—Ç–∞ —É —Å—É–ø–µ—Ä–ø–∏—Ä–∞, –ø–µ—Ä–µ—Å—ã–ª–∞—é FIND_FREE_SUPERPEER –¥—Ä—É–≥–∏–º —Å—É–ø–µ—Ä–ø–∏—Ä–∞–º")
				superpeers := a.getSuperpeers()

				for superpeerIP := range superpeers {
					if superpeerIP == remoteAddr.String() {
						continue
					}
					
					address := net.UDPAddr{IP: net.ParseIP(superpeerIP), Port: 55001}
					log.Printf("‚û°Ô∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∞ FIND_FREE_SUPERPEER –Ω–∞ %s", address.String())
					sendJSONUDP(address.String(), Message{Type: FindFreeSuperpeerMessageType})
				}
			}
		}

		case FreeSuperpeerForBootstrapMessageType: {
			log.Println("ü™ú –û–±—Ä–∞–±–æ—Ç–∫–∞ FREE_SUPERPEER_FOR_BOOTSTRAP")

			var body FreeSuperpeerForBootstrap
			if err := json.Unmarshal(msg.Body, &body); err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ç–µ–ª–∞: %v %s", err, msg.Body)
				return
			}
			log.Printf("üì• –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è bootstrap: %s", body.IP)

			log.Printf("üöÄ –ó–∞–ø—É—Å–∫ bootstrap —Å %s", body.IP)

			a.bootstrap(BootstrapAddress{
				IP: body.IP,
			})
		}

		case FreeSuperpeerMessageType: {
			log.Println("üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ FREE_SUPERPEER")

			addr := strings.TrimSpace(strings.TrimPrefix(message, "FREE_SUPERPEER"))
			log.Printf("üîó –ê–¥—Ä–µ—Å —Å—É–ø–µ—Ä–ø–∏—Ä–∞: %s", addr)

			for _, waitingPeerAddress := range a.waitingPeers {
				log.Printf("üì® –†–∞—Å—Å—ã–ª–∫–∞ FREE_SUPERPEER_FOR_BOOTSTRAP %s -> %s", addr, waitingPeerAddress)

				address := net.UDPAddr{IP: remoteAddr.IP, Port: 55001}

				body, err := json.Marshal(FreeSuperpeerForBootstrap{IP: a.host})
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %v", err)
					return
				}

				sendJSONUDP(address.String(), Message{Type: FreeSuperpeerMessageType, Body: body})
			}

			var body FreeSuperpeer
			if err := json.Unmarshal(msg.Body, &body); err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ç–µ–ª–∞: %v", err)
				return
			}

			for superpeerAddress := range a.getSuperpeers() {
				log.Printf("üîÅ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ FREE_SUPERPEER -> %s", superpeerAddress)

				nextBody, err := json.Marshal(body)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %v", err)
					return
				}

				sendJSONUDP(superpeerAddress, Message{Type: FreeSuperpeerMessageType, Body: nextBody})
			}
		}

		case ElectNewSuperpeerMessageType: {
			peerCount := len(a.getPeers())
			log.Println(a.peers, peerCount)

			for peerIP := range a.getPeers() {
				address := net.UDPAddr{IP: net.ParseIP(peerIP), Port: 55001}

				sendJSONUDP(address.String(), Message{Type: CandidateSuperpeerMessageType})
			}
		}
	}
}

func (a *Agent) bootstrap(bootstrap BootstrapAddress) {
	log.Printf("–£–∑–µ–ª –Ω–∞—á–∞–ª bootstraping-–ø—Ä–æ—Ü–µ—Å—Å")

	maxRetries := 5
	delay := 5 * time.Second

	for i := 1; i <= maxRetries; i++ {
		addr := fmt.Sprintf("%s:%d", bootstrap.IP, 55000)
		conn, err := net.Dial("tcp", addr)

		if err != nil {
			log.Printf("‚ö† –ü–æ–ø—ã—Ç–∫–∞ %d/%d ‚Äî –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", i, maxRetries, err)
			time.Sleep(delay)
			continue
		}

		sendJSONTCP(conn, Message{Type: ConnectRequestMessageType})
		log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ bootstrap –Ω–∞ –∞–¥—Ä–µ—Å %s", addr)

		response, err := bufio.NewReader(conn).ReadString('\n')
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å—É–ø–µ—Ä–ø–∏—Ä–∞: %v", err)
			conn.Close()
			time.Sleep(delay)
			continue
		}

		log.Printf("–û—Ç–≤–µ—Ç —Å—É–ø–µ—Ä–ø–∏—Ä–∞: %s", response)
		conn.Close()

		var message Message
		if err := json.Unmarshal([]byte(response), &message); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return
		}

		if message.Type == ConnectedMessageType {
			a.peers[bootstrap.IP] = PeerInfo{
				IP: bootstrap.IP,
				IsSuper: true,
			}

			a.discoverPeers(bootstrap.IP)
			return
		} else if message.Type == WaitMessageType {
			log.Printf("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–ø–∏—Ä–∞...")
			return
		}
	}

	log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", maxRetries)
}

func (a *Agent) reportPeers(exceptionIPs []string) {
	peers := make(ReportPeersRequest, 0)

	for _, peerInfo := range a.peers {
		peers = append(peers, peerInfo)
	}

	body, err := json.Marshal(peers);
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ç–µ–ª–∞: %v", err)
		return
	}

	for peerIP := range a.peers {
		if (exceptionIPs == nil || !slices.Contains(exceptionIPs, peerIP)) {
			address := fmt.Sprintf("%s:%d", peerIP, 55001)
			sendJSONUDP(address, Message{Type: ReportPeersMessageType, Body: body })
		}
	}
}

func (a *Agent) discoverPeers(ip string) {
	address := fmt.Sprintf("%s:%d", ip, 55000)

	conn, err := net.Dial("tcp", address)
	if err != nil {
		log.Printf("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ %s: %v", address, err)
		return
	}
	defer conn.Close()

	sendJSONTCP(conn, Message{Type: DiscoverPeersMessageType})

	response, _ := bufio.NewReader(conn).ReadString('\n')

	var peers DiscoverPeersResponse
	if err := json.Unmarshal([]byte(response), &peers); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ç–µ–ª–∞ –∑–¥–µ—Å—å: %v %s", err, response)
		return
	}

	a.peersMutex.Lock()

	for _, peerInfo := range peers {
		if peerInfo.IP != a.host {
			a.peers[peerInfo.IP] = peerInfo
		}
	}
	a.peersMutex.Unlock()
	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É–∑–ª—ã –æ—Ç %s: %v", ip, peers)
}
